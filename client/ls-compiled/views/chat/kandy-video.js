// Generated by LiveScript 1.3.1
var callId, audio;
this.KandyAux = {};
callId = null;
audio = null;
KandyAux.init = function($scope){
  var loggedInCallback;
  $(function(){
    console.log("running setup");
    return kandy.setup({
      remoteVideoContainer: $('#theirVideo')[0],
      localVideoContainer: $('#myVideo')[0],
      listeners: {
        setupsuccess: function(){
          return console.log("setup success");
        },
        loginsuccess: function(){
          console.log("logged in!");
          return KandyAPI.Phone.updatePresence(0);
        },
        loginfailed: function(){
          return console.log("login failed!");
        },
        callinitiated: function(call){
          callId = call.getId();
          swal({
            title: 'Waiting for the user to answer the call...',
            type: 'info',
            confirmButtonColor: '#ec971f',
            confirmButtonText: 'End call'
          }, function(isConfirm){
            if (isConfirm) {
              return KandyAux.endCall();
            }
          });
          console.log("Call inititated");
        },
        callinitiatefailed: function(call){
          swal.close();
          $scope.aux.callStatus = "none";
          return $scope.$apply();
        },
        oncall: function(call){
          console.log("oncall");
          swal.close();
          $scope.aux.callStatus = "onCall";
          return $scope.$apply();
        },
        callended: function(call){
          callId = null;
          $('#theirVideo').empty();
          $scope.aux.callStatus = "none";
          return $scope.$apply();
        },
        callendedfailed: function(){},
        callincoming: function(call, isAnonymous){
          console.log("incoming call!");
          callId = call.getId();
          return swal({
            title: 'Incoming call',
            text: 'Do you want to answer the call?',
            type: 'info',
            showCancelButton: true,
            confirmButtonColor: '#449d44',
            confirmButtonText: 'Answer',
            cancelButtonText: 'Reject',
            closeOnConfirm: false,
            closeOnCancel: false
          }, function(isConfirm){
            if (isConfirm) {
              KandyAux.answerVideoCall();
            } else {
              KandyAux.rejectCall();
            }
          });
        },
        callanswered: function(call, isAnonymous){
          swal.close();
          $scope.aux.callStatus = "onCall";
          return $scope.$apply();
        },
        callrejected: function(){
          var callId;
          swal({
            title: "Call rejected",
            type: 'error'
          });
          console.debug('callrejected');
          callId = null;
          $scope.aux.callStatus = "none";
          return $scope.$apply();
        }
      }
    });
  });
  KandyAux.login = function(user, pass){
    $scope.aux.kandyStatus = "logging";
    $scope.$apply();
    return kandy.login("DAKdfa40b049ccd4e218d787fec86e6c98b", user, pass, function(){
      console.log("logged in");
      Session.set("isKandyLoggedIn", true);
      return loggedInCallback();
    }, function(){
      return console.log("error logging in");
    });
  };
  loggedInCallback = function(){
    $scope.aux.kandyStatus = "loggedIn";
    return $scope.$apply();
  };
  if (Session.get("isKandyLoggedIn")) {
    loggedInCallback();
  } else {
    Meteor.call('getKandyData', function(err, result){
      console.log("getKandyData", err, result);
      if (!err) {
        return KandyAux.login(result.user_id, result.user_password);
      }
    });
  }
  KandyAux.answerVideoCall = function(){
    swal({
      title: "Connecting...",
      text: "Please allow access to camera and microphone.",
      showConfirmButton: false
    });
    console.log("answering...");
    return kandy.call.answerCall(callId, true);
  };
  KandyAux.makeCall = function(user_id){
    swal({
      title: "Connecting...",
      text: "Please allow access to camera and microphone.",
      showConfirmButton: false
    });
    $scope.aux.callStatus = "calling";
    return kandy.call.makeCall(user_id, true);
  };
  KandyAux.rejectCall = function(){
    swal.close();
    return kandy.call.rejectCall(callId);
  };
  return KandyAux.endCall = function(){
    return kandy.call.endCall(callId);
  };
};